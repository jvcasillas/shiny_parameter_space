[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n#\n#\n\n# Load packages\nlibrary(\"shiny\")\nlibrary(\"ggplot2\")\nlibrary(\"tidyr\")\nlibrary(\"dplyr\")\nlibrary(\"broom\")\nlibrary(\"patchwork\")\n\n# Set theme for ggplot\nparam_theme <- function(...) {\n  list(\n    theme_bw(...), \n    theme(\n      panel.grid.major = element_line(linewidth = 0.2),\n      panel.grid.minor = element_line(linewidth = 0.2)\n    )\n  )\n}\n\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Exploring parameter space\", windowTitle = \"Parameter space\"),\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(width = 3, \n          withMathJax(),\n            p(\"$$y_i \\\\sim Normal(\\\\mu_i, \\\\sigma)$$\"), \n            p(\"$$\\\\mu_i = \\\\alpha + \\\\beta x_i$$\"), \n            br(), \n            sliderInput(\n              inputId = \"b_0\",\n              label = \"Intercept\",\n              min = -1.5, max = 1.5, value = 0, step = 0.1, ticks = F), \n            sliderInput(\n              inputId = \"b_1\",\n              label = \"Slope\",\n              min = -1.5, max = 1.5, value = 0.5, step = 0.1, ticks = F),\n            #sliderInput(\n            #  inputId = \"sigma\",\n            #  label = \"Sigma\",\n            #  min = 0.1, max = 2, value = 1, step = 0.1, ticks = F),\n            #sliderInput(\n            #  inputId = \"n\",\n            #  label = \"N\",\n            #  min = 25, max = 500, value = 25, step = 1, ticks = F), \n            br(), \n            p(strong(\"Created by:\"), \n              tags$a(\"Joseph V. Casillas\", href=\"https://www.jvcasillas.com\"),\n            br(), \n            strong(\"Source code:\"), \n              tags$a(\"Github\", href=\"https://github.com/jvcasillas/shiny_parameters/\"))\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(width = 9, br(), \n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n        # generate data\n        #dat <- tibble(\n        #  x = rnorm(input$n, 0, 1), \n        #  y = input$b_0 + x * input$b_1 + rnorm(input$n, 0, input$sigma)\n        #)\n        set.seed(20210302)\n        dat <- tibble(\n          x = rnorm(25, 0, 1), \n          y = 0 + x * 0.5 + rnorm(25, 0, 1)\n        )\n\n        # Fit model\n        mod <- lm(y ~ x, data = dat)\n\n        # Data space plot\n        p1 <- augment(mod) %>% \n          ggplot(., aes(x = x, y = y)) + \n            geom_vline(xintercept = 0, lty = 3) + \n            geom_hline(yintercept = 0, lty = 3) + \n            geom_point(aes(fill = .resid), pch = 21, size = 4, show.legend = F) + \n            scale_fill_gradient2() + \n            geom_abline(intercept = coef(mod)[1], slope = coef(mod)[2], \n              color = \"#cc0033\", linewidth = 1.2) + \n            geom_abline(intercept = input$b_0, slope = input$b_1, \n              color = \"grey\", linewidth = 1.2) + \n            coord_cartesian(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + \n            labs(title = \"Data space\") + \n            param_theme(base_size = 16)\n\n        # Parameter space plot\n        p2 <- tidy(mod) %>% \n          select(term, estimate, error = std.error) %>% \n          mutate(\n            term = stringr::str_replace(term, \"\\\\(Intercept\\\\)\", \"y\")) %>% \n          pivot_wider(names_from = \"term\", values_from = c(\"estimate\", \"error\")) %>% \n          transmute(\n            x = estimate_x, \n            y = estimate_y, \n            xmin = estimate_x - (error_x * 1.96), \n            xmax = estimate_x + (error_x * 1.96), \n            ymin = estimate_y - (error_y * 1.96), \n            ymax = estimate_y + (error_y * 1.96)\n            ) %>% \n          ggplot(., aes(x = x, y = y)) + \n            geom_vline(xintercept = 0, lty = 3) + \n            geom_hline(yintercept = 0, lty = 3) + \n            geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.1) + \n            geom_errorbarh(aes(xmin = xmin, xmax = xmax), height = 0.1) + \n            geom_point(size = 2 + input$sigma, pch = 21, fill = \"#cc0033\", stroke = 1.2) + \n            coord_cartesian(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + \n            scale_y_continuous(position = \"right\") + \n            labs(title = \"Parameter space\", y = \"Intercept\", x = \"Slope\") + \n            param_theme(base_size = 16)\n\n        p3 <- ggplot(data = tibble(x = input$b_1, y = input$b_0)) + \n          aes(x = x, y = y) + \n          geom_point(size = 8, color = \"#cc0033\") + \n          coord_cartesian(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + \n          scale_y_continuous(position = \"right\") + \n          labs(title = \"Parameter space\", y = \"Intercept\", x = \"Slope\") + \n          param_theme(base_size = 16)\n\n        # Print plots together\n        p1 + p3\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
